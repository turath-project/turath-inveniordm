user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Standard log format
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    # Request tracing log format - includes request id, session id, user id,
    # and request timing.
    log_format trace '$remote_addr - [$time_local] "$request" '
                 '$status  $body_bytes_sent "$http_referer"  '
                 '"$http_user_agent" "$http_x_forwarded_for" $request_id '
                 '$msec $request_time '
                 '$upstream_http_x_session_id $upstream_http_x_user_id';

    access_log  /var/log/nginx/access.log  trace;

    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;

    keepalive_timeout  65;

    gzip on;
    gzip_disable "msie6";
    gzip_http_version 1.1;
    gzip_comp_level 5; # or anything between 4-6
    gzip_min_length 100;
    gzip_proxied any;
    # We may need more mime-types here (eg. 'application/x-bibtex')
    gzip_types
        application/atom+xml
        application/javascript
        application/json
        application/ld+json
        application/manifest+json
        application/octet-stream
        application/rss+xml
        application/vnd.geo+json
        application/vnd.ms-fontobject
        application/x-font-ttf
        application/x-javascript
        application/x-web-app-manifest+json
        application/xhtml+xml
        application/xml
        application/xml+rss
        font/opentype
        image/bmp
        image/svg+xml
        image/x-icon
        text/cache-manifest
        text/css
        text/javascript
        text/plain
        text/vcard
        text/vnd.rim.location.xloc
        text/vtt
        text/x-component
        text/x-cross-domain-policy
        text/xml;
    gzip_vary on;

    # This nginx configuration defines two servers, one on port 80 and one on port
    # 443. All traffix on port 80 is redirect to port 443 on SSL.
    #
    # Nginx proxies all requests on port 443 to upstream the application server
    # which is expected to be running on port 5000/5001.

    upstream ui_server {
    server web-ui:5000 fail_timeout=0;
    }
    #upstream api_server {
    #  server web-api:5000 fail_timeout=0;
    #}

    # HTTP server
    server {
    # Redirects all requests to https. - this is in addition to HAProxy which
    # already redirects http to https. This redirect is needed in case you access
    # the server directly (e.g. useful for debugging).
    listen 80; # IPv4
    listen [::]:80; # IPv6
    server_name _;
    return 301 https://$host$request_uri;
    }

    # HTTPS server
    server {
    listen 443 ssl http2; # IPv4
    listen [::]:443 ssl http2; # IPv6
    server_name _;
    charset utf-8;
    keepalive_timeout 5;

    # SSL configuration according to best practices from
    # https://mozilla.github.io/server-side-tls/ssl-config-generator/
    # The provided certificate (test.crt) and private key (test.key) is only for
    # testing and must never be used in production environment.
    ssl_certificate /etc/ssl/certs/test.crt;
    ssl_certificate_key /etc/ssl/private/test.key;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;

    # Accepted protocols and ciphers
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
    ssl_prefer_server_ciphers on;

    add_header Strict-Transport-Security "max-age=15768000"; # 6 months

    # Request ID tracing (allows end-to-end tracking of requests for better
    # troubleshooting)
    add_header X-Request-ID $request_id;

    # The request body is sent to the proxied server immediately as it is
    # received
    proxy_request_buffering off;
    # Sets the HTTP protocol v1.1 for proxying in order to not use the buffer
    # in case of chunked transfer encoding
    proxy_http_version 1.1;

    # Proxying to the application server
    ## UI server
    location / {
        uwsgi_pass ui_server;
        include uwsgi_params;
        uwsgi_buffering off;
        uwsgi_request_buffering off;
        uwsgi_param Host $host;
        uwsgi_param X-Forwarded-For $proxy_add_x_forwarded_for;
        uwsgi_param X-Forwarded-Proto $scheme;
        # Pass request id to the ui server
        uwsgi_param X-Request-ID $request_id;
        # X-Session-ID / X-User-ID is read by nginx and included in the logs,
        # however we don't want to expose them to clients so we are hiding them.
        uwsgi_hide_header X-Session-ID;
        uwsgi_hide_header X-User-ID;
        # Max upload size (except for files) is set to 100mb as default.
        client_max_body_size 100m;
    }
    ## Most API
    location /api {
        uwsgi_pass ui_server;
        include uwsgi_params;
        uwsgi_buffering off;
        uwsgi_request_buffering off;
        uwsgi_param Host $host;
        uwsgi_param X-Forwarded-For $proxy_add_x_forwarded_for;
        uwsgi_param X-Forwarded-Proto $scheme;
        # Pass request id to the api server
        uwsgi_param X-Request-ID $request_id;
        # X-Session-ID / X-User-ID is read by nginx and included in the logs,
        # however we don't want to expose them to clients so we are hiding them.
        uwsgi_hide_header X-Session-ID;
        uwsgi_hide_header X-User-ID;
        # Max upload size (except for files) is set to 100mb as default.
        client_max_body_size 100m;
    }
    ## API files
    # Another location is defined in order to allow large file uploads in the files
    # API without exposing the other parts of the application to receive huge
    # request bodies.
    location ~ /api/records/.+/draft/files/.+/content {
        gzip off;
        uwsgi_pass ui_server;
        include uwsgi_params;
        uwsgi_buffering off;
        uwsgi_request_buffering off;
        uwsgi_param Host $host;
        uwsgi_param X-Forwarded-For $proxy_add_x_forwarded_for;
        uwsgi_param X-Forwarded-Proto $scheme;
        # Pass request id to api server
        uwsgi_param X-Request-ID $request_id;
        # X-Session-ID / X-User-ID is read by nginx and included in the logs,
        # however we don't want to expose them to clients so we are hiding them.
        uwsgi_hide_header X-Session-ID;
        uwsgi_hide_header X-User-ID;
        # Max upload size for files is set to 50GB (configure as needed).
        client_max_body_size 50G;
    }
    # Static content is served directly by nginx and not the application server.
    location /static {
        alias /opt/invenio/var/instance/static;
        autoindex off;
    }
    # Robots.txt file is served by nginx.
    location /robots.txt {
        alias /opt/invenio/var/instance/static/robots.txt;
        autoindex off;
    }
    }
}